/**
 * NUCLEUS API
 * OpenMove public APIs documentation. NUCLEUS API exposes a set of APIs tuned to support efficient and easy integration with any customer and to provide the best experience for users. We would welcome the opportunity to refine the specifications better to match your use case. These APIs have a thin nature in order to answer focused questions with very short response times. Some of these APIs also assume a user context, which will allow rolling various IDâ€™s (such as stopId) between requests.
 *
 * OpenAPI spec version: 4.6.0
 * Contact: support@openmove.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openmove.aroundsardinia;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ParkingsreserveTickets1 {
  
  @SerializedName("fareId")
  private String fareId = null;
  @SerializedName("fareTypeId")
  private String fareTypeId = null;
  @SerializedName("fromDate")
  private Date fromDate = null;
  @SerializedName("toDate")
  private Date toDate = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getFareId() {
    return fareId;
  }
  public void setFareId(String fareId) {
    this.fareId = fareId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getFareTypeId() {
    return fareTypeId;
  }
  public void setFareTypeId(String fareTypeId) {
    this.fareTypeId = fareTypeId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getFromDate() {
    return fromDate;
  }
  public void setFromDate(Date fromDate) {
    this.fromDate = fromDate;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Date getToDate() {
    return toDate;
  }
  public void setToDate(Date toDate) {
    this.toDate = toDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParkingsreserveTickets1 parkingsreserveTickets1 = (ParkingsreserveTickets1) o;
    return (this.fareId == null ? parkingsreserveTickets1.fareId == null : this.fareId.equals(parkingsreserveTickets1.fareId)) &&
        (this.fareTypeId == null ? parkingsreserveTickets1.fareTypeId == null : this.fareTypeId.equals(parkingsreserveTickets1.fareTypeId)) &&
        (this.fromDate == null ? parkingsreserveTickets1.fromDate == null : this.fromDate.equals(parkingsreserveTickets1.fromDate)) &&
        (this.toDate == null ? parkingsreserveTickets1.toDate == null : this.toDate.equals(parkingsreserveTickets1.toDate));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.fareId == null ? 0: this.fareId.hashCode());
    result = 31 * result + (this.fareTypeId == null ? 0: this.fareTypeId.hashCode());
    result = 31 * result + (this.fromDate == null ? 0: this.fromDate.hashCode());
    result = 31 * result + (this.toDate == null ? 0: this.toDate.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParkingsreserveTickets1 {\n");
    
    sb.append("  fareId: ").append(fareId).append("\n");
    sb.append("  fareTypeId: ").append(fareTypeId).append("\n");
    sb.append("  fromDate: ").append(fromDate).append("\n");
    sb.append("  toDate: ").append(toDate).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
