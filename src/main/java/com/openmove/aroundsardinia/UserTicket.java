/**
 * NUCLEUS API
 * OpenMove public APIs documentation. NUCLEUS API exposes a set of APIs tuned to support efficient and easy integration with any customer and to provide the best experience for users. We would welcome the opportunity to refine the specifications better to match your use case. These APIs have a thin nature in order to answer focused questions with very short response times. Some of these APIs also assume a user context, which will allow rolling various IDâ€™s (such as stopId) between requests.
 *
 * OpenAPI spec version: 4.6.0
 * Contact: support@openmove.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openmove.aroundsardinia;

import com.openmove.aroundsardinia.UserTicketChecks;
import com.openmove.aroundsardinia.UserTicketFare;
import com.openmove.aroundsardinia.UserTicketPayment;
import com.openmove.aroundsardinia.UserTicketStatus;
import java.util.*;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class UserTicket {
  
  @SerializedName("_id")
  private String id = null;
  @SerializedName("userId")
  private String userId = null;
  @SerializedName("paidAt")
  private Date paidAt = null;
  @SerializedName("startAt")
  private Date startAt = null;
  @SerializedName("endAt")
  private Date endAt = null;
  @SerializedName("updatedAt")
  private Date updatedAt = null;
  public enum ChannelEnum {
     openmove,  nucleusapi,
  };
  @SerializedName("channel")
  private ChannelEnum channel = null;
  public enum CurrencyEnum {
     EUR,  USD,  GBP, 
  };
  @SerializedName("currency")
  private CurrencyEnum currency = null;
  @SerializedName("sequence")
  private String sequence = null;
  @SerializedName("price")
  private Integer price = null;
  @SerializedName("totalPrice")
  private Integer totalPrice = null;
  @SerializedName("quantity")
  private Integer quantity = null;
  @SerializedName("payment")
  private UserTicketPayment payment = null;
  @SerializedName("fare")
  private UserTicketFare fare = null;
  @SerializedName("createdAt")
  private Date createdAt = null;
  @SerializedName("status")
  private UserTicketStatus status = null;
  @SerializedName("lastCheck")
  private Date lastCheck = null;
  @SerializedName("checks")
  private List<UserTicketChecks> checks = null;

  /**
   * unique identifier
   **/
  @ApiModelProperty(value = "unique identifier")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * user identifier
   **/
  @ApiModelProperty(value = "user identifier")
  public String getUserId() {
    return userId;
  }
  public void setUserId(String userId) {
    this.userId = userId;
  }

  /**
   * paid date (if performed)
   **/
  @ApiModelProperty(value = "paid date (if performed)")
  public Date getPaidAt() {
    return paidAt;
  }
  public void setPaidAt(Date paidAt) {
    this.paidAt = paidAt;
  }

  /**
   * first check date (if performed)
   **/
  @ApiModelProperty(value = "first check date (if performed)")
  public Date getStartAt() {
    return startAt;
  }
  public void setStartAt(Date startAt) {
    this.startAt = startAt;
  }

  /**
   * end date for ticket availability
   **/
  @ApiModelProperty(value = "end date for ticket availability")
  public Date getEndAt() {
    return endAt;
  }
  public void setEndAt(Date endAt) {
    this.endAt = endAt;
  }

  /**
   * last event update date
   **/
  @ApiModelProperty(value = "last event update date")
  public Date getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * channel provider
   **/
  @ApiModelProperty(value = "channel provider")
  public ChannelEnum getChannel() {
    return channel;
  }
  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }

  /**
   * currency ISO code
   **/
  @ApiModelProperty(value = "currency ISO code")
  public CurrencyEnum getCurrency() {
    return currency;
  }
  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }

  /**
   * ticket sequence code
   **/
  @ApiModelProperty(value = "ticket sequence code")
  public String getSequence() {
    return sequence;
  }
  public void setSequence(String sequence) {
    this.sequence = sequence;
  }

  /**
   * fare price, in cents
   **/
  @ApiModelProperty(value = "fare price, in cents")
  public Integer getPrice() {
    return price;
  }
  public void setPrice(Integer price) {
    this.price = price;
  }

  /**
   * total price: price * quantity
   **/
  @ApiModelProperty(value = "total price: price * quantity")
  public Integer getTotalPrice() {
    return totalPrice;
  }
  public void setTotalPrice(Integer totalPrice) {
    this.totalPrice = totalPrice;
  }

  /**
   * number of passengers
   **/
  @ApiModelProperty(value = "number of passengers")
  public Integer getQuantity() {
    return quantity;
  }
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public UserTicketPayment getPayment() {
    return payment;
  }
  public void setPayment(UserTicketPayment payment) {
    this.payment = payment;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public UserTicketFare getFare() {
    return fare;
  }
  public void setFare(UserTicketFare fare) {
    this.fare = fare;
  }

  /**
   * ticket creation date
   **/
  @ApiModelProperty(value = "ticket creation date")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public UserTicketStatus getStatus() {
    return status;
  }
  public void setStatus(UserTicketStatus status) {
    this.status = status;
  }

  /**
   * last check date (if performed)
   **/
  @ApiModelProperty(value = "last check date (if performed)")
  public Date getLastCheck() {
    return lastCheck;
  }
  public void setLastCheck(Date lastCheck) {
    this.lastCheck = lastCheck;
  }

  /**
   * checks list
   **/
  @ApiModelProperty(value = "checks list")
  public List<UserTicketChecks> getChecks() {
    return checks;
  }
  public void setChecks(List<UserTicketChecks> checks) {
    this.checks = checks;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserTicket userTicket = (UserTicket) o;
    return (this.id == null ? userTicket.id == null : this.id.equals(userTicket.id)) &&
        (this.userId == null ? userTicket.userId == null : this.userId.equals(userTicket.userId)) &&
        (this.paidAt == null ? userTicket.paidAt == null : this.paidAt.equals(userTicket.paidAt)) &&
        (this.startAt == null ? userTicket.startAt == null : this.startAt.equals(userTicket.startAt)) &&
        (this.endAt == null ? userTicket.endAt == null : this.endAt.equals(userTicket.endAt)) &&
        (this.updatedAt == null ? userTicket.updatedAt == null : this.updatedAt.equals(userTicket.updatedAt)) &&
        (this.channel == null ? userTicket.channel == null : this.channel.equals(userTicket.channel)) &&
        (this.currency == null ? userTicket.currency == null : this.currency.equals(userTicket.currency)) &&
        (this.sequence == null ? userTicket.sequence == null : this.sequence.equals(userTicket.sequence)) &&
        (this.price == null ? userTicket.price == null : this.price.equals(userTicket.price)) &&
        (this.totalPrice == null ? userTicket.totalPrice == null : this.totalPrice.equals(userTicket.totalPrice)) &&
        (this.quantity == null ? userTicket.quantity == null : this.quantity.equals(userTicket.quantity)) &&
        (this.payment == null ? userTicket.payment == null : this.payment.equals(userTicket.payment)) &&
        (this.fare == null ? userTicket.fare == null : this.fare.equals(userTicket.fare)) &&
        (this.createdAt == null ? userTicket.createdAt == null : this.createdAt.equals(userTicket.createdAt)) &&
        (this.status == null ? userTicket.status == null : this.status.equals(userTicket.status)) &&
        (this.lastCheck == null ? userTicket.lastCheck == null : this.lastCheck.equals(userTicket.lastCheck)) &&
        (this.checks == null ? userTicket.checks == null : this.checks.equals(userTicket.checks));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.userId == null ? 0: this.userId.hashCode());
    result = 31 * result + (this.paidAt == null ? 0: this.paidAt.hashCode());
    result = 31 * result + (this.startAt == null ? 0: this.startAt.hashCode());
    result = 31 * result + (this.endAt == null ? 0: this.endAt.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    result = 31 * result + (this.channel == null ? 0: this.channel.hashCode());
    result = 31 * result + (this.currency == null ? 0: this.currency.hashCode());
    result = 31 * result + (this.sequence == null ? 0: this.sequence.hashCode());
    result = 31 * result + (this.price == null ? 0: this.price.hashCode());
    result = 31 * result + (this.totalPrice == null ? 0: this.totalPrice.hashCode());
    result = 31 * result + (this.quantity == null ? 0: this.quantity.hashCode());
    result = 31 * result + (this.payment == null ? 0: this.payment.hashCode());
    result = 31 * result + (this.fare == null ? 0: this.fare.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.lastCheck == null ? 0: this.lastCheck.hashCode());
    result = 31 * result + (this.checks == null ? 0: this.checks.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserTicket {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  userId: ").append(userId).append("\n");
    sb.append("  paidAt: ").append(paidAt).append("\n");
    sb.append("  startAt: ").append(startAt).append("\n");
    sb.append("  endAt: ").append(endAt).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("  channel: ").append(channel).append("\n");
    sb.append("  currency: ").append(currency).append("\n");
    sb.append("  sequence: ").append(sequence).append("\n");
    sb.append("  price: ").append(price).append("\n");
    sb.append("  totalPrice: ").append(totalPrice).append("\n");
    sb.append("  quantity: ").append(quantity).append("\n");
    sb.append("  payment: ").append(payment).append("\n");
    sb.append("  fare: ").append(fare).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  lastCheck: ").append(lastCheck).append("\n");
    sb.append("  checks: ").append(checks).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
