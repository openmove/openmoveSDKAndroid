/**
 * NUCLEUS API
 * OpenMove public APIs documentation. NUCLEUS API exposes a set of APIs tuned to support efficient and easy integration with any customer and to provide the best experience for users. We would welcome the opportunity to refine the specifications better to match your use case. These APIs have a thin nature in order to answer focused questions with very short response times. Some of these APIs also assume a user context, which will allow rolling various IDâ€™s (such as stopId) between requests.
 *
 * OpenAPI spec version: 4.6.0
 * Contact: support@openmove.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openmove.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import com.openmove.aroundsardinia.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;


import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ShelterApi {
  String basePath = "https://api.openmove.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Returns agencies list
  * 
   * @return void
  */
  public void shelterAgenciesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/shelter/agencies";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns agencies list
   * 

  */
  public void shelterAgenciesGet (final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/shelter/agencies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns calendar dates list of given agency tag
  * 
   * @param tag gtfs tag
   * @return void
  */
  public void shelterCalendarDatesTagGet (String tag) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterCalendarDatesTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterCalendarDatesTagGet"));
    }

    // create path and map variables
    String path = "/shelter/calendarDates/{tag}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns calendar dates list of given agency tag
   * 
   * @param tag gtfs tag
  */
  public void shelterCalendarDatesTagGet (String tag, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterCalendarDatesTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterCalendarDatesTagGet"));
    }

    // create path and map variables
    String path = "/shelter/calendarDates/{tag}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns calendar list of given agency tag
  * 
   * @param tag gtfs tag
   * @return void
  */
  public void shelterCalendarTagGet (String tag) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterCalendarTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterCalendarTagGet"));
    }

    // create path and map variables
    String path = "/shelter/calendar/{tag}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns calendar list of given agency tag
   * 
   * @param tag gtfs tag
  */
  public void shelterCalendarTagGet (String tag, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterCalendarTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterCalendarTagGet"));
    }

    // create path and map variables
    String path = "/shelter/calendar/{tag}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns routes list of given agency tag
  * 
   * @param tag gtfs tag
   * @return void
  */
  public void shelterRoutesTagGet (String tag) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterRoutesTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterRoutesTagGet"));
    }

    // create path and map variables
    String path = "/shelter/routes/{tag}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns routes list of given agency tag
   * 
   * @param tag gtfs tag
  */
  public void shelterRoutesTagGet (String tag, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterRoutesTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterRoutesTagGet"));
    }

    // create path and map variables
    String path = "/shelter/routes/{tag}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns shapes list of given agency tag
  * 
   * @param tag gtfs tag
   * @param shapeId gtfs shape id
   * @return void
  */
  public void shelterShapesTagShapeIdGet (String tag, String shapeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterShapesTagShapeIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterShapesTagShapeIdGet"));
    }
    // verify the required parameter 'shapeId' is set
    if (shapeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shapeId' when calling shelterShapesTagShapeIdGet",
        new ApiException(400, "Missing the required parameter 'shapeId' when calling shelterShapesTagShapeIdGet"));
    }

    // create path and map variables
    String path = "/shelter/shapes/{tag}/{shapeId}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "shapeId" + "\\}", apiInvoker.escapeString(shapeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns shapes list of given agency tag
   * 
   * @param tag gtfs tag   * @param shapeId gtfs shape id
  */
  public void shelterShapesTagShapeIdGet (String tag, String shapeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterShapesTagShapeIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterShapesTagShapeIdGet"));
    }
    // verify the required parameter 'shapeId' is set
    if (shapeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shapeId' when calling shelterShapesTagShapeIdGet",
        new ApiException(400, "Missing the required parameter 'shapeId' when calling shelterShapesTagShapeIdGet"));
    }

    // create path and map variables
    String path = "/shelter/shapes/{tag}/{shapeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "shapeId" + "\\}", apiInvoker.escapeString(shapeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns stopTimes list of given agency tag and trip id
  * 
   * @param tag gtfs tag
   * @param tripId gtfs trip id
   * @return void
  */
  public void shelterStopTimesTagTripIdGet (String tag, String tripId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdGet"));
    }
    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdGet",
        new ApiException(400, "Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdGet"));
    }

    // create path and map variables
    String path = "/shelter/stopTimes/{tag}/{tripId}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "tripId" + "\\}", apiInvoker.escapeString(tripId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns stopTimes list of given agency tag and trip id
   * 
   * @param tag gtfs tag   * @param tripId gtfs trip id
  */
  public void shelterStopTimesTagTripIdGet (String tag, String tripId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdGet"));
    }
    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdGet",
        new ApiException(400, "Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdGet"));
    }

    // create path and map variables
    String path = "/shelter/stopTimes/{tag}/{tripId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "tripId" + "\\}", apiInvoker.escapeString(tripId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns stopTimes list of given agency tag, trip id and stop id
  * 
   * @param tag gtfs tag
   * @param tripId gtfs trip id
   * @param stopId gtfs stop id
   * @return void
  */
  public void shelterStopTimesTagTripIdStopIdGet (String tag, String tripId, String stopId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdStopIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdStopIdGet"));
    }
    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdStopIdGet",
        new ApiException(400, "Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdStopIdGet"));
    }
    // verify the required parameter 'stopId' is set
    if (stopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopId' when calling shelterStopTimesTagTripIdStopIdGet",
        new ApiException(400, "Missing the required parameter 'stopId' when calling shelterStopTimesTagTripIdStopIdGet"));
    }

    // create path and map variables
    String path = "/shelter/stopTimes/{tag}/{tripId}/{stopId}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "tripId" + "\\}", apiInvoker.escapeString(tripId.toString())).replaceAll("\\{" + "stopId" + "\\}", apiInvoker.escapeString(stopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns stopTimes list of given agency tag, trip id and stop id
   * 
   * @param tag gtfs tag   * @param tripId gtfs trip id   * @param stopId gtfs stop id
  */
  public void shelterStopTimesTagTripIdStopIdGet (String tag, String tripId, String stopId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdStopIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterStopTimesTagTripIdStopIdGet"));
    }
    // verify the required parameter 'tripId' is set
    if (tripId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdStopIdGet",
        new ApiException(400, "Missing the required parameter 'tripId' when calling shelterStopTimesTagTripIdStopIdGet"));
    }
    // verify the required parameter 'stopId' is set
    if (stopId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopId' when calling shelterStopTimesTagTripIdStopIdGet",
        new ApiException(400, "Missing the required parameter 'stopId' when calling shelterStopTimesTagTripIdStopIdGet"));
    }

    // create path and map variables
    String path = "/shelter/stopTimes/{tag}/{tripId}/{stopId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "tripId" + "\\}", apiInvoker.escapeString(tripId.toString())).replaceAll("\\{" + "stopId" + "\\}", apiInvoker.escapeString(stopId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns stops list of given agency tag
  * 
   * @param tag gtfs tag
   * @return void
  */
  public void shelterStopsTagGet (String tag) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterStopsTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterStopsTagGet"));
    }

    // create path and map variables
    String path = "/shelter/stops/{tag}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns stops list of given agency tag
   * 
   * @param tag gtfs tag
  */
  public void shelterStopsTagGet (String tag, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterStopsTagGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterStopsTagGet"));
    }

    // create path and map variables
    String path = "/shelter/stops/{tag}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns trips list of given agency tag and route id
  * 
   * @param tag gtfs tag
   * @param routeId gtfs route id
   * @return void
  */
  public void shelterTripsTagRouteIdGet (String tag, String routeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterTripsTagRouteIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterTripsTagRouteIdGet"));
    }
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'routeId' when calling shelterTripsTagRouteIdGet",
        new ApiException(400, "Missing the required parameter 'routeId' when calling shelterTripsTagRouteIdGet"));
    }

    // create path and map variables
    String path = "/shelter/trips/{tag}/{routeId}".replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "routeId" + "\\}", apiInvoker.escapeString(routeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns trips list of given agency tag and route id
   * 
   * @param tag gtfs tag   * @param routeId gtfs route id
  */
  public void shelterTripsTagRouteIdGet (String tag, String routeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'tag' is set
    if (tag == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tag' when calling shelterTripsTagRouteIdGet",
        new ApiException(400, "Missing the required parameter 'tag' when calling shelterTripsTagRouteIdGet"));
    }
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'routeId' when calling shelterTripsTagRouteIdGet",
        new ApiException(400, "Missing the required parameter 'routeId' when calling shelterTripsTagRouteIdGet"));
    }

    // create path and map variables
    String path = "/shelter/trips/{tag}/{routeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag" + "\\}", apiInvoker.escapeString(tag.toString())).replaceAll("\\{" + "routeId" + "\\}", apiInvoker.escapeString(routeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
