/**
 * NUCLEUS API
 * OpenMove public APIs documentation. NUCLEUS API exposes a set of APIs tuned to support efficient and easy integration with any customer and to provide the best experience for users. We would welcome the opportunity to refine the specifications better to match your use case. These APIs have a thin nature in order to answer focused questions with very short response times. Some of these APIs also assume a user context, which will allow rolling various IDâ€™s (such as stopId) between requests.
 *
 * OpenAPI spec version: 4.6.0
 * Contact: support@openmove.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openmove.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import com.openmove.aroundsardinia.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import com.openmove.aroundsardinia.ReserveConfirm;
import com.openmove.aroundsardinia.ReserveConfirm1;
import com.openmove.aroundsardinia.ReserveDelete;
import com.openmove.aroundsardinia.ReserveRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BookingsApi {
  String basePath = "https://api.openmove.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Returns agencies enabled info
  * 
   * @return void
  */
  public void agenciesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/agencies";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns agencies enabled info
   * 

  */
  public void agenciesGet (final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/agencies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns routes info
  * 
   * @param agencyId agency id
   * @return void
  */
  public void routesAgencyIdGet (String agencyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling routesAgencyIdGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling routesAgencyIdGet"));
    }

    // create path and map variables
    String path = "/routes/{agencyId}".replaceAll("\\{" + "agencyId" + "\\}", apiInvoker.escapeString(agencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns routes info
   * 
   * @param agencyId agency id
  */
  public void routesAgencyIdGet (String agencyId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling routesAgencyIdGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling routesAgencyIdGet"));
    }

    // create path and map variables
    String path = "/routes/{agencyId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "agencyId" + "\\}", apiInvoker.escapeString(agencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns routes info
  * 
   * @param agencyId agency id
   * @return void
  */
  public void routesWithFaresAgencyIdGet (String agencyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling routesWithFaresAgencyIdGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling routesWithFaresAgencyIdGet"));
    }

    // create path and map variables
    String path = "/routes-with-fares/{agencyId}".replaceAll("\\{" + "agencyId" + "\\}", apiInvoker.escapeString(agencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns routes info
   * 
   * @param agencyId agency id
  */
  public void routesWithFaresAgencyIdGet (String agencyId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling routesWithFaresAgencyIdGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling routesWithFaresAgencyIdGet"));
    }

    // create path and map variables
    String path = "/routes-with-fares/{agencyId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "agencyId" + "\\}", apiInvoker.escapeString(agencyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns stops info
  * 
   * @param agencyId agency id
   * @param routeId route id
   * @return void
  */
  public void stopsAgencyIdRouteIdGet (String agencyId, String routeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling stopsAgencyIdRouteIdGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling stopsAgencyIdRouteIdGet"));
    }
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'routeId' when calling stopsAgencyIdRouteIdGet",
        new ApiException(400, "Missing the required parameter 'routeId' when calling stopsAgencyIdRouteIdGet"));
    }

    // create path and map variables
    String path = "/stops/{agencyId}/{routeId}".replaceAll("\\{" + "agencyId" + "\\}", apiInvoker.escapeString(agencyId.toString())).replaceAll("\\{" + "routeId" + "\\}", apiInvoker.escapeString(routeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns stops info
   * 
   * @param agencyId agency id   * @param routeId route id
  */
  public void stopsAgencyIdRouteIdGet (String agencyId, String routeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling stopsAgencyIdRouteIdGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling stopsAgencyIdRouteIdGet"));
    }
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'routeId' when calling stopsAgencyIdRouteIdGet",
        new ApiException(400, "Missing the required parameter 'routeId' when calling stopsAgencyIdRouteIdGet"));
    }

    // create path and map variables
    String path = "/stops/{agencyId}/{routeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "agencyId" + "\\}", apiInvoker.escapeString(agencyId.toString())).replaceAll("\\{" + "routeId" + "\\}", apiInvoker.escapeString(routeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns trips list
  * 
   * @param agencyId agency id
   * @param routeId route id
   * @param stopIdFrom from stop id
   * @param stopIdTo to stop id
   * @param date start date
   * @param quantity number of passengers
   * @return void
  */
  public void tripsGet (String agencyId, String routeId, String stopIdFrom, String stopIdTo, String date, BigDecimal quantity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling tripsGet"));
    }
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'routeId' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'routeId' when calling tripsGet"));
    }
    // verify the required parameter 'stopIdFrom' is set
    if (stopIdFrom == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopIdFrom' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'stopIdFrom' when calling tripsGet"));
    }
    // verify the required parameter 'stopIdTo' is set
    if (stopIdTo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopIdTo' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'stopIdTo' when calling tripsGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'date' when calling tripsGet"));
    }

    // create path and map variables
    String path = "/trips";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "agencyId", agencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "routeId", routeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stopIdFrom", stopIdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stopIdTo", stopIdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns trips list
   * 
   * @param agencyId agency id   * @param routeId route id   * @param stopIdFrom from stop id   * @param stopIdTo to stop id   * @param date start date   * @param quantity number of passengers
  */
  public void tripsGet (String agencyId, String routeId, String stopIdFrom, String stopIdTo, String date, BigDecimal quantity, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'agencyId' is set
    if (agencyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'agencyId' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'agencyId' when calling tripsGet"));
    }
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'routeId' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'routeId' when calling tripsGet"));
    }
    // verify the required parameter 'stopIdFrom' is set
    if (stopIdFrom == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopIdFrom' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'stopIdFrom' when calling tripsGet"));
    }
    // verify the required parameter 'stopIdTo' is set
    if (stopIdTo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stopIdTo' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'stopIdTo' when calling tripsGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling tripsGet",
        new ApiException(400, "Missing the required parameter 'date' when calling tripsGet"));
    }

    // create path and map variables
    String path = "/trips".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "agencyId", agencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "routeId", routeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stopIdFrom", stopIdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stopIdTo", stopIdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Confirm reservation
  * 
   * @param reserveConfirm trips reserve confirmation
   * @return void
  */
  public void tripsReserveConfirmPost (ReserveConfirm1 reserveConfirm) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reserveConfirm;
    // verify the required parameter 'reserveConfirm' is set
    if (reserveConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveConfirm' when calling tripsReserveConfirmPost",
        new ApiException(400, "Missing the required parameter 'reserveConfirm' when calling tripsReserveConfirmPost"));
    }

    // create path and map variables
    String path = "/trips/reserve/confirm";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Confirm reservation
   * 
   * @param reserveConfirm trips reserve confirmation
  */
  public void tripsReserveConfirmPost (ReserveConfirm1 reserveConfirm, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reserveConfirm;

    // verify the required parameter 'reserveConfirm' is set
    if (reserveConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveConfirm' when calling tripsReserveConfirmPost",
        new ApiException(400, "Missing the required parameter 'reserveConfirm' when calling tripsReserveConfirmPost"));
    }

    // create path and map variables
    String path = "/trips/reserve/confirm".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete reservation
  * 
   * @param reserveDelete trips reserve delete
   * @return void
  */
  public void tripsReserveDelete (ReserveDelete reserveDelete) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reserveDelete;
    // verify the required parameter 'reserveDelete' is set
    if (reserveDelete == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveDelete' when calling tripsReserveDelete",
        new ApiException(400, "Missing the required parameter 'reserveDelete' when calling tripsReserveDelete"));
    }

    // create path and map variables
    String path = "/trips/reserve";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete reservation
   * 
   * @param reserveDelete trips reserve delete
  */
  public void tripsReserveDelete (ReserveDelete reserveDelete, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reserveDelete;

    // verify the required parameter 'reserveDelete' is set
    if (reserveDelete == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveDelete' when calling tripsReserveDelete",
        new ApiException(400, "Missing the required parameter 'reserveDelete' when calling tripsReserveDelete"));
    }

    // create path and map variables
    String path = "/trips/reserve".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Register reservation (not confirmed), waiting for the confirmation
  * 
   * @param reserveRequest trips reserve data
   * @return void
  */
  public void tripsReservePost (ReserveRequest reserveRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reserveRequest;
    // verify the required parameter 'reserveRequest' is set
    if (reserveRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveRequest' when calling tripsReservePost",
        new ApiException(400, "Missing the required parameter 'reserveRequest' when calling tripsReservePost"));
    }

    // create path and map variables
    String path = "/trips/reserve";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Register reservation (not confirmed), waiting for the confirmation
   * 
   * @param reserveRequest trips reserve data
  */
  public void tripsReservePost (ReserveRequest reserveRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reserveRequest;

    // verify the required parameter 'reserveRequest' is set
    if (reserveRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveRequest' when calling tripsReservePost",
        new ApiException(400, "Missing the required parameter 'reserveRequest' when calling tripsReservePost"));
    }

    // create path and map variables
    String path = "/trips/reserve".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update reservation with user info
  * 
   * @param reserveConfirm trips reserve user info
   * @return void
  */
  public void tripsReservePut (ReserveConfirm reserveConfirm) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reserveConfirm;
    // verify the required parameter 'reserveConfirm' is set
    if (reserveConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveConfirm' when calling tripsReservePut",
        new ApiException(400, "Missing the required parameter 'reserveConfirm' when calling tripsReservePut"));
    }

    // create path and map variables
    String path = "/trips/reserve";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Bearer" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update reservation with user info
   * 
   * @param reserveConfirm trips reserve user info
  */
  public void tripsReservePut (ReserveConfirm reserveConfirm, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reserveConfirm;

    // verify the required parameter 'reserveConfirm' is set
    if (reserveConfirm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reserveConfirm' when calling tripsReservePut",
        new ApiException(400, "Missing the required parameter 'reserveConfirm' when calling tripsReservePut"));
    }

    // create path and map variables
    String path = "/trips/reserve".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Bearer" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
